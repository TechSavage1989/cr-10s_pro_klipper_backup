; =============================================================================
; Macro Config — Organized by Function
; =============================================================================

; -------------------------------------------------------------------------
; Section: Core Modules & Settings
; -------------------------------------------------------------------------
[pause_resume]

[respond]
# default_type: echo
# default_prefix: echo:

[save_variables]
filename: /home/biqu/printer_data/variables.cfg  # ← Update path as needed

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT- +

[exclude_object]

[idle_timeout]
timeout: 172800  # seconds before idle timeout

[gcode_arcs]
# resolution: 1.0  # arc chord length in mm

; -------------------------------------------------------------------------
; Section: System Controls (Pause, Resume, Cancel)
; -------------------------------------------------------------------------
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true' %}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead for pause or cancel
variable_extrude: 1.0
gcode:
  # Calculate park coordinates
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_delta = 2.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_delta) %}
    {% set z_safe = z_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  # Retract filament if hot
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude|lower == 'true' %} M82 {% endif %}
  {% else %}
    { action_respond_info("Extruder not hot enough") }
  {% endif %}

  # Park axes if homed
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    { action_respond_info("Printer not homed") }
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  # Retrieve saved retract amount
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  # Build optional VELOCITY param
  {% set vel_param = 'VELOCITY=' + params.VELOCITY if 'VELOCITY' in params else '' %}
  # Prime filament if hot
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude|lower == 'true' %} M82 {% endif %}
  {% else %}
    { action_respond_info("Extruder not hot enough") }
  {% endif %}
  RESUME_BASE {vel_param}

; -------------------------------------------------------------------------
; Section: PID Tuning (Extruder & Bed)
; -------------------------------------------------------------------------
[gcode_macro PID_TUNE_SELECT]
# Fluidd shows only TYPE, PRESET, TEMP—STEP is internal.
params:
  TYPE:
  PRESET:
  TEMP:
description: >
  Calibrate Extruder or Bed PID via presets or custom TEMP.
  Runs PID_CALIBRATE, saves config, notifies when done.
gcode:
  {% set extruder_PLA = 200 %}  {% set extruder_ABS = 240 %}  {% set extruder_PETG = 230 %}
  {% set bed_PLA      =  60 %}  {% set bed_ABS      = 100 %}  {% set bed_PETG     =  80 %}

  {% if not params.STEP %}
    # Step 1: select heater
    RESPOND TYPE=command MSG="action:prompt_begin Select heater"
    RESPOND TYPE=command MSG="action:prompt_button Extruder|PID_TUNE_SELECT STEP=heater TYPE=extruder;action:prompt_end|primary"
    RESPOND TYPE=command MSG="action:prompt_button Bed     |PID_TUNE_SELECT STEP=heater TYPE=bed;action:prompt_end|secondary"
    RESPOND TYPE=command MSG="action:prompt_show"

  {% elif params.STEP == 'heater' %}
    # Step 2: select preset or custom
    {% if params.TYPE == 'extruder' %}
      RESPOND TYPE=command MSG="action:prompt_begin Extruder PID temp"
      RESPOND TYPE=command MSG="action:prompt_button PLA|PID_TUNE_SELECT STEP=run TYPE=extruder PRESET=PLA;action:prompt_end|primary"
      RESPOND TYPE=command MSG="action:prompt_button ABS|PID_TUNE_SELECT STEP=run TYPE=extruder PRESET=ABS;action:prompt_end|secondary"
      RESPOND TYPE=command MSG="action:prompt_button PETG|PID_TUNE_SELECT STEP=run TYPE=extruder PRESET=PETG;action:prompt_end|info"
      RESPOND TYPE=command MSG="action:prompt_input Custom temp (°C)|TEMP|200"
      RESPOND TYPE=command MSG="action:prompt_footer_button Calibrate|PID_TUNE_SELECT STEP=run TYPE=extruder TEMP={TEMP};action:prompt_end|warning"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_begin Bed PID temp"
      RESPOND TYPE=command MSG="action:prompt_button PLA|PID_TUNE_SELECT STEP=run TYPE=bed PRESET=PLA;action:prompt_end|primary"
      RESPOND TYPE=command MSG="action:prompt_button ABS|PID_TUNE_SELECT STEP=run TYPE=bed PRESET=ABS;action:prompt_end|secondary"
      RESPOND TYPE=command MSG="action:prompt_button PETG|PID_TUNE_SELECT STEP=run TYPE=bed PRESET=PETG;action:prompt_end|info"
      RESPOND TYPE=command MSG="action:prompt_input Custom temp (°C)|TEMP|60"
      RESPOND TYPE=command MSG="action:prompt_footer_button Calibrate|PID_TUNE_SELECT STEP=run TYPE=bed TEMP={TEMP};action:prompt_end|warning"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_show"

  {% else %}
    # Step 3: run calibration
    RESPOND TYPE=command MSG="action:prompt_end"
    {% if params.TYPE == 'extruder' %}
      {% set temp = presets = {'PLA':extruder_PLA,'ABS':extruder_ABS,'PETG':extruder_PETG}[params.PRESET] if params.PRESET else params.TEMP|int %}
      {% set heater_id, name = 'extruder','Extruder' %}
    {% else %}
      {% set temp = {'PLA':bed_PLA,'ABS':bed_ABS,'PETG':bed_PETG}[params.PRESET] if params.PRESET else params.TEMP|int %}
      {% set heater_id, name = 'heater_bed','Bed' %}
    {% endif %}
    RESPOND TYPE=echo MSG="⌛ Calibrating {name} PID at {temp}°C"
    PID_CALIBRATE HEATER={heater_id} TARGET={temp}
    SAVE_CONFIG
    RESPOND TYPE=command MSG="action:notify {name} PID tuned at {temp}°C complete"
  {% endif %}

; -------------------------------------------------------------------------
; Section: Bed Screw & Level Adjustments
; -------------------------------------------------------------------------
[gcode_macro SCREWS_TILT_Adjust]
gcode:
  SCREWS_TILT_CALCULATE

[gcode_macro BED_SCREWS_ADJUST]
gcode:
  BED_SCREWS_ADJUST

; -------------------------------------------------------------------------
; Section: Bed Leveling & Probe Tests
; -------------------------------------------------------------------------
[gcode_macro M48]
description: Probe Consistency Check
gcode:
  G1 Z5      ; move up slightly
  PROBE      ; repeat measurement
  G1 Z5
  PROBE
  G1 Z5
  PROBE
  G1 Z5
  PROBE
  G1 Z5
  PROBE
  G1 Z20

[gcode_macro Self_Test]
description: BLTouch deploy/retract test
gcode:
  {% for _ in range(8) %}
  BLTOUCH_DEBUG COMMAND=pin_up
  BLTOUCH_DEBUG COMMAND=pin_down
  {% endfor %}

; -------------------------------------------------------------------------
; Section: Extruder Tool Selection
; -------------------------------------------------------------------------
[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER EXTRUDER=extruder

; (T1–T3 commented out for future use)

; -------------------------------------------------------------------------
; Section: Print Start/End Workflows
; -------------------------------------------------------------------------
[gcode_macro _CHOME]
gcode:
  {% if printer["gcode_macro status_homing"] != null %} status_homing {% endif %}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  {% if printer["gcode_macro status_ready"] != null %} status_ready {% endif %}

[gcode_macro PRINT_START_Palette]
gcode:
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  {% set BED      = params.BED_TEMP|int %}
  M104 S{EXTRUDER}
  M140 S{BED}
  _CHOME
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  M109 S{EXTRUDER}

[gcode_macro PRINT_START]
gcode:
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  {% set BED      = params.BED_TEMP|int %}
  M104 S{EXTRUDER}
  M140 S{BED}
  _CHOME
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  M109 S{EXTRUDER}
  _ADAPTIVE_PURGE

[gcode_macro PRINT_END]
gcode:
  _MOVE_AWAY
  G1 E-60 F1800
  PARK_CENTER_REAR
  TURN_OFF_HEATERS
  M84

; -------------------------------------------------------------------------
; Section: Filament Handling
; -------------------------------------------------------------------------
[gcode_macro LOAD_FILAMENT]
variable_load_distance: 10
variable_purge_distance: 50
gcode:
  {% set speed = params.SPEED|default(300) %}
  {% set maxv  = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{maxv}
  G1 E{purge_distance} F{speed}
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance: 10
variable_purge_distance: 50
gcode:
  {% set speed = params.SPEED|default(300) %}
  {% set maxv  = printer.configfile.settings['extruder'].max_extrude_only_velocity * 60 %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  G92 E0
  G1 E{purge_distance} F{speed}
  G1 E-{unload_distance} F{maxv}
  RESTORE_GCODE_STATE NAME=unload_state

; -------------------------------------------------------------------------
; Section: Bed Mesh Calibration
; -------------------------------------------------------------------------
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Adaptive bed mesh over printed object bounds
variable_buffer: 2
gcode:
  # ... (existing long Jinja/mesh code) ...

; -------------------------------------------------------------------------
; Section: Adaptive Purge
; -------------------------------------------------------------------------
[gcode_macro _ADAPTIVE_PURGE]
description: Purge near printed objects (logo)
# variable definitions omitted for brevity
gcode:
  # ... (existing purge code) ...

; -------------------------------------------------------------------------
; Section: Utility & Git Integration
; -------------------------------------------------------------------------
[gcode_macro update_git]
gcode:
  {% if params.MESSAGE %}
    RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
  {% else %}
    RUN_SHELL_COMMAND CMD=update_git_script
  {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

; -------------------------------------------------------------------------
; Section: Deprecated / Commented-Out Macros
; -------------------------------------------------------------------------
# [gcode_macro G29]
# [gcode_macro M0]
# [gcode_macro M601]
# [gcode_macro M602]
# [gcode_macro M24]
# [gcode_macro M108]
# [gcode_macro Accelerometer_Query]
# [gcode_macro SHAPER_CALIBRATE]

; End of organized macro.cfg
